Name:        loopgotowhile
Version:     0.1
Synopsis:    Interpreters for three simple programming languages created for 
             self-educational purposes
Description: 

  This project contains interpreters for the programming languages *Loop, Goto
  & While* that are based on Prof Dr. Heribert Vollmer's
  (<http://www.thi.uni-hannover.de/en/homepage/people/heribert-vollmer/>)
  lecture notes for his introductory course in theoretical computer science.
  They are modeled to feel similar to common imperative programming languages
  but they are delibaretly greatly simplified. Furthermore, when possible,
  functions to transform source code from one language to another are provided,
  too.
  .
  The homepage has a [live web evaluation service][evalservice] where you can
  write some code and have it either evaluated or transformed. Additionally, to
  keep yourself entertained, you can find some exercises on that website, too.
  .
  The specifications for the languages can be either found in the README or
  on this project's homepage.

Homepage:     http://loopgotowhile.eugenkiss.com/
License:      BSD3
License-file: LICENSE
Author:       Eugen Kiss (eugen@eugenkiss.com)
Maintainer:   Eugen Kiss (eugen@eugenkiss.com)
Stability:    Experimental
Category:     Language

Cabal-version:      >=1.2
Build-type:         Simple
Extra-source-files: README.mkd

Source-Repository head
    Type:     git
    Location: https://github.com/eugenkiss/loopgotowhile
    Branch:   master

Flag test
    Description: Build the tests
    Default:     False

Library
    Ghc-Options:    -Wall
    Hs-Source-Dirs: src
    Build-Depends:   
        base >= 4.0,
        haskell98 == 1.1.*,
        mtl == 2.0.*,
        array == 0.3.*,
        parsec >= 2.1.0 && <= 3.1.1
    Exposed-Modules:
        Language.LoopGotoWhile.Loop.Strict
        Language.LoopGotoWhile.Loop.StrictAS
        Language.LoopGotoWhile.Loop.Extended
        Language.LoopGotoWhile.Loop.ExtendedAS
        Language.LoopGotoWhile.Loop.Transform
        Language.LoopGotoWhile.Goto.Strict
        Language.LoopGotoWhile.Goto.StrictAS
        Language.LoopGotoWhile.Goto.Extended
        Language.LoopGotoWhile.Goto.ExtendedAS
        Language.LoopGotoWhile.Goto.Transform
        Language.LoopGotoWhile.While.Strict
        Language.LoopGotoWhile.While.StrictAS
        Language.LoopGotoWhile.While.Extended
        Language.LoopGotoWhile.While.ExtendedAS
        Language.LoopGotoWhile.While.Transform
    Other-Modules:
        Language.LoopGotoWhile.Shared.Util
        Language.LoopGotoWhile.Shared.Extended
        Language.LoopGotoWhile.Shared.ExtendedAS
        Language.LoopGotoWhile.Shared.Transform

Executable test
    Ghc-Options:    -Wall
    Hs-Source-Dirs: src, tests
    Main-Is:        TestSuite.hs
    if !flag(test)
        Buildable:  False
    Build-Depends:   
        base >= 4.0,
        haskell98 == 1.1.*,
        mtl == 2.0.*,
        array == 0.3.*,
        parsec >= 2.1.0 && <= 3.1.1,
        test-framework == 0.4.*,
        test-framework-hunit == 0.2.*, 
        HUnit == 1.2.*
    
--TODO: Executable loop
  
--TODO: Executable goto

--TODO: Executable while
